{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "Comp-6",
  "type": "registry:component",
  "description": "Appointment Picker",
  "dependencies": [
    "@internationalized/date"
  ],
  "registryDependencies": [
    "button",
    "calendar"
  ],
  "files": [
    {
      "path": "registry/default/components/Comp-6.vue",
      "content": "<script lang=\"ts\" setup>\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n   CalendarCell,\r\n   CalendarCellTrigger,\r\n   CalendarGrid,\r\n   CalendarGridBody,\r\n   CalendarGridHead,\r\n   CalendarGridRow,\r\n   CalendarHeadCell,\r\n   CalendarHeader,\r\n   CalendarHeading,\r\n   CalendarNextButton,\r\n   CalendarPrevButton,\r\n} from \"@/registry/default/ui/calendar\";\r\nimport {\r\n   CalendarRoot,\r\n   type CalendarRootEmits,\r\n   type CalendarRootProps,\r\n   useForwardPropsEmits,\r\n   ConfigProvider,\r\n} from \"reka-ui\";\r\nimport {\r\n   type DateValue,\r\n   createCalendar,\r\n   getLocalTimeZone,\r\n   toCalendar,\r\n   today,\r\n   PersianCalendar,\r\n   CalendarDateTime,\r\n} from \"@internationalized/date\";\r\nimport type { HTMLAttributes } from \"vue\";\r\nimport { reactiveOmit } from \"@vueuse/core\";\r\n\r\nconst props = withDefaults(\r\n   defineProps<\r\n      CalendarRootProps & {\r\n         class?: HTMLAttributes[\"class\"];\r\n      }\r\n   >(),\r\n   {\r\n      locale: \"fa-IR\",\r\n   },\r\n);\r\n\r\nconst emits = defineEmits<CalendarRootEmits>();\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\");\r\n\r\nconst forwarded = useForwardPropsEmits(delegatedProps, emits);\r\n\r\nconst todayDate = toCalendar(\r\n   today(getLocalTimeZone()),\r\n   createCalendar(\"persian\"),\r\n);\r\n\r\nconst model: DateValue = props.modelValue\r\n   ? (props.modelValue as DateValue)\r\n   : todayDate;\r\n\r\nconst modelValue = ref(\r\n   new CalendarDateTime(\r\n      new PersianCalendar(),\r\n      model.year,\r\n      model.month,\r\n      model.day,\r\n      12,\r\n      30,\r\n      0,\r\n   ),\r\n) as Ref<DateValue>;\r\n\r\nconst timeSlots = [\r\n   { time: \"09:00\", available: false },\r\n   { time: \"09:30\", available: false },\r\n   { time: \"10:00\", available: true },\r\n   { time: \"10:30\", available: true },\r\n   { time: \"11:00\", available: true },\r\n   { time: \"11:30\", available: true },\r\n   { time: \"12:00\", available: false },\r\n   { time: \"12:30\", available: true },\r\n   { time: \"13:00\", available: true },\r\n   { time: \"13:30\", available: true },\r\n   { time: \"14:00\", available: true },\r\n   { time: \"14:30\", available: false },\r\n   { time: \"15:00\", available: false },\r\n   { time: \"15:30\", available: true },\r\n   { time: \"16:00\", available: true },\r\n   { time: \"16:30\", available: true },\r\n   { time: \"17:00\", available: true },\r\n   { time: \"17:30\", available: true },\r\n];\r\n\r\nconst handleTimeClick = (time: string) => {\r\n   const [hours, minutes] = time.split(\":\").map(Number);\r\n   modelValue.value = new CalendarDateTime(\r\n      new PersianCalendar(),\r\n      modelValue.value.year,\r\n      modelValue.value.month,\r\n      modelValue.value.day,\r\n      hours,\r\n      minutes,\r\n   );\r\n};\r\n\r\nconst isSelectedTime = (time: string) => {\r\n   const [hours, minutes] = time.split(\":\").map(Number);\r\n\r\n   if (\"hour\" in modelValue.value && \"minute\" in modelValue.value) {\r\n      return (\r\n         modelValue.value.hour === hours && modelValue.value.minute === minutes\r\n      );\r\n   }\r\n\r\n   return false;\r\n};\r\n\r\nconst formatter = new Intl.DateTimeFormat(\"fa-IR\", {\r\n   day: \"numeric\",\r\n   weekday: \"short\",\r\n   month: \"long\",\r\n});\r\n\r\nconst formatDate = computed(() =>\r\n   formatter.format(modelValue.value.toDate(getLocalTimeZone())),\r\n);\r\n</script>\r\n\r\n<template>\r\n   <ConfigProvider dir=\"rtl\">\r\n      <div\r\n         class=\"bg-background dir-rtl rounded-lg border border-neutral-300 p-3\"\r\n      >\r\n         <div class=\"flex gap-4 max-sm:flex-col\">\r\n            <CalendarRoot\r\n               data-slot=\"calendar\"\r\n               v-slot=\"{ grid, weekDays }\"\r\n               :class=\"props.class\"\r\n               v-bind=\"forwarded\"\r\n               v-model=\"modelValue\"\r\n            >\r\n               <CalendarHeader>\r\n                  <CalendarHeading class=\"dir-ltr\" />\r\n                  <div class=\"flex items-center gap-1\">\r\n                     <CalendarPrevButton class=\"calendar-prev-btn\" />\r\n                     <CalendarNextButton class=\"calendar-next-btn\" />\r\n                  </div>\r\n               </CalendarHeader>\r\n               <div\r\n                  class=\"mt-4 flex flex-col gap-y-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\"\r\n               >\r\n                  <CalendarGrid\r\n                     v-for=\"month in grid\"\r\n                     :key=\"month.value.toString()\"\r\n                  >\r\n                     <CalendarGridHead>\r\n                        <CalendarGridRow>\r\n                           <CalendarHeadCell v-for=\"day in weekDays\" :key=\"day\">\r\n                              {{ day }}\r\n                           </CalendarHeadCell>\r\n                        </CalendarGridRow>\r\n                     </CalendarGridHead>\r\n                     <CalendarGridBody>\r\n                        <CalendarGridRow\r\n                           v-for=\"(weekDates, index) in month.rows\"\r\n                           :key=\"`weekDate-${index}`\"\r\n                           class=\"mt-2 w-full\"\r\n                        >\r\n                           <CalendarCell\r\n                              v-for=\"weekDate in weekDates\"\r\n                              :key=\"weekDate.toString()\"\r\n                              :date=\"weekDate\"\r\n                           >\r\n                              <CalendarCellTrigger\r\n                                 :day=\"weekDate\"\r\n                                 :month=\"month.value\"\r\n                                 class=\"[&[data-today]:not([data-selected])]:bg-unset [&[data-today]:not([data-selected])]:text-unset data-[today]:after:content-[' '] data-[today]:after:bg-primary data-[today]:data-[selected]:after:bg-primary-foreground data-[today]:after:absolute data-[today]:after:bottom-[5px] data-[today]:after:h-[3px] data-[today]:after:w-[3px] data-[today]:after:rounded-full\"\r\n                              />\r\n                           </CalendarCell>\r\n                        </CalendarGridRow>\r\n                     </CalendarGridBody>\r\n                  </CalendarGrid>\r\n               </div>\r\n            </CalendarRoot>\r\n            <div class=\"relative w-full max-sm:h-48 sm:w-40\">\r\n               <div class=\"absolute inset-0 pt-2 max-sm:border-t sm:pt-0\">\r\n                  <ScrollArea class=\"h-full sm:border-s\" type=\"always\">\r\n                     <div class=\"space-y-3\">\r\n                        <div\r\n                           class=\"flex h-5 shrink-0 items-center justify-center px-5\"\r\n                        >\r\n                           <p class=\"text-sm font-medium\">\r\n                              {{ formatDate }}\r\n                           </p>\r\n                        </div>\r\n                        <div class=\"grid gap-1.5 px-5 max-sm:grid-cols-2\">\r\n                           <Button\r\n                              v-for=\"time in timeSlots\"\r\n                              :key=\"time.time\"\r\n                              :variant=\"\r\n                                 isSelectedTime(time.time)\r\n                                    ? 'default'\r\n                                    : 'outline'\r\n                              \"\r\n                              size=\"sm\"\r\n                              class=\"w-full\"\r\n                              :disabled=\"!time.available\"\r\n                              @click=\"handleTimeClick(time.time)\"\r\n                           >\r\n                              {{ time.time }}\r\n                           </Button>\r\n                        </div>\r\n                     </div>\r\n                  </ScrollArea>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </ConfigProvider>\r\n</template>\r\n<style scoped>\r\n.calendar-prev-btn {\r\n   left: unset !important;\r\n   right: 0;\r\n   rotate: 180deg;\r\n}\r\n\r\n.calendar-next-btn {\r\n   right: unset !important;\r\n   left: 0;\r\n   rotate: 180deg;\r\n}\r\n.dir-rtl {\r\n   direction: rtl;\r\n}\r\n\r\n.dir-ltr {\r\n   direction: ltr;\r\n}\r\n</style>\r\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "colSpan": 2
  }
}