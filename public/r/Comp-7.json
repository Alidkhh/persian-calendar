{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "Comp-7",
  "type": "registry:component",
  "description": "Collapsible selection",
  "registryDependencies": [
    "button",
    "calendar",
    "collapsible"
  ],
  "files": [
    {
      "path": "registry/default/components/Comp-7.vue",
      "content": "<script lang=\"ts\" setup>\r\nimport type { HTMLAttributes } from \"vue\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { cn } from \"~/lib/utils\";\r\nimport { reactiveOmit } from \"@vueuse/core\";\r\nimport {\r\n   CalendarCell,\r\n   CalendarCellTrigger,\r\n   CalendarGrid,\r\n   CalendarGridBody,\r\n   CalendarGridHead,\r\n   CalendarGridRow,\r\n   CalendarHeadCell,\r\n   CalendarHeader,\r\n   CalendarNextButton,\r\n   CalendarPrevButton,\r\n} from \"@/registry/default/ui/calendar\";\r\nimport {\r\n   Collapsible,\r\n   CollapsibleContent,\r\n   CollapsibleTrigger,\r\n} from \"@/registry/default/ui/collapsible\";\r\nimport {\r\n   CalendarDate,\r\n   getLocalTimeZone,\r\n   today,\r\n   type DateValue,\r\n   createCalendar,\r\n   toCalendar,\r\n   PersianCalendar,\r\n} from \"@internationalized/date\";\r\nimport { useTimeoutFn } from \"@vueuse/core\";\r\nimport { LucideChevronDown } from \"lucide-vue-next\";\r\nimport {\r\n   CalendarRoot,\r\n   type CalendarRootEmits,\r\n   type CalendarRootProps,\r\n   useForwardPropsEmits,\r\n   ConfigProvider,\r\n} from \"reka-ui\";\r\n\r\nconst props = withDefaults(\r\n   defineProps<\r\n      CalendarRootProps & {\r\n         class?: HTMLAttributes[\"class\"];\r\n      }\r\n   >(),\r\n   {\r\n      locale: \"fa-IR\",\r\n   },\r\n);\r\n\r\nconst emits = defineEmits<CalendarRootEmits>();\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\");\r\n\r\nconst forwarded = useForwardPropsEmits(delegatedProps, emits);\r\n\r\nconst todayDate = toCalendar(\r\n   today(getLocalTimeZone()),\r\n   createCalendar(\"persian\"),\r\n);\r\n\r\nconst modelValue = ref(\r\n   props.modelValue ? props.modelValue : todayDate,\r\n) as Ref<DateValue>;\r\n\r\nconst years = Array.from({ length: 40 }, (_, i) => todayDate.year - 20 + i);\r\n\r\nconst getMonthName = (month: number) => {\r\n   return new CalendarDate(new PersianCalendar(), todayDate.year, month, 1)\r\n      .toDate(getLocalTimeZone())\r\n      .toLocaleString(\"fa-IR\", { month: \"short\" });\r\n};\r\n\r\nconst isCurrentYear = (year: number) => {\r\n   return year === modelValue.value.year;\r\n};\r\n\r\nconst collapsibleOpen = ref(false);\r\n\r\nconst scrollToCurrentYear = () => {\r\n   const currentYearElement = document.querySelector(\r\n      `[data-year=\"${modelValue.value.year}\"]`,\r\n   );\r\n\r\n   if (currentYearElement) {\r\n      currentYearElement.scrollIntoView({\r\n         behavior: \"smooth\",\r\n         block: \"nearest\",\r\n      });\r\n   }\r\n};\r\n\r\nconst { start } = useTimeoutFn(scrollToCurrentYear, 0);\r\n\r\nwatch(collapsibleOpen, (isOpen) => {\r\n   if (isOpen) {\r\n      start();\r\n   }\r\n});\r\n\r\nconst selectMonth = (year: number, month: number) => {\r\n   modelValue.value = new CalendarDate(\r\n      new PersianCalendar(),\r\n      year,\r\n      month,\r\n      modelValue.value.day,\r\n   );\r\n   collapsibleOpen.value = false;\r\n};\r\n</script>\r\n\r\n<template>\r\n   <ConfigProvider dir=\"rtl\">\r\n      <CalendarRoot\r\n         data-slot=\"calendar\"\r\n         v-slot=\"{ weekDays, grid }\"\r\n         :class=\"\r\n            cn(\r\n               'bg-background relative overflow-hidden rounded-lg border border-neutral-300 p-3',\r\n               props.class,\r\n            )\r\n         \"\r\n         v-bind=\"forwarded\"\r\n         v-model=\"modelValue\"\r\n      >\r\n         <CalendarHeader class=\"static flex justify-between pt-0\">\r\n            <Collapsible v-model:open=\"collapsibleOpen\">\r\n               <CollapsibleTrigger asChild>\r\n                  <Button\r\n                     class=\"flex items-center gap-2 text-sm font-medium hover:bg-transparent [&[data-state=open]>svg]:rotate-180\"\r\n                     variant=\"ghost\"\r\n                     size=\"sm\"\r\n                  >\r\n                     <CalendarHeading class=\"dir-ltr flex-1\" />\r\n                     <LucideChevronDown\r\n                        class=\"text-muted-foreground/80 size-4 shrink-0 transition-transform duration-200\"\r\n                        aria-hidden=\"true\"\r\n                     />\r\n                  </Button>\r\n               </CollapsibleTrigger>\r\n               <CollapsibleContent\r\n                  class=\"bg-background absolute inset-x-0 top-15 bottom-0 z-10\"\r\n               >\r\n                  <ScrollArea class=\"h-full\">\r\n                     <Collapsible\r\n                        v-for=\"year in years\"\r\n                        :key=\"year\"\r\n                        class=\"border-t px-2 py-1.5\"\r\n                        :defaultOpen=\"isCurrentYear(year)\"\r\n                        :data-year=\"year\"\r\n                     >\r\n                        <CollapsibleTrigger asChild>\r\n                           <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              class=\"flex w-full justify-between gap-2 text-sm font-medium hover:bg-transparent [&[data-state=open]>svg]:rotate-180\"\r\n                           >\r\n                              <span>{{ year }}</span>\r\n                              <LucideChevronDown\r\n                                 class=\"text-muted-foreground/80 size-4 shrink-0 transition-transform duration-200\"\r\n                                 aria-hidden=\"true\"\r\n                              />\r\n                           </Button>\r\n                        </CollapsibleTrigger>\r\n                        <CollapsibleContent\r\n                           class=\"data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down overflow-hidden py-1 text-sm transition-all\"\r\n                        >\r\n                           <div class=\"grid grid-cols-3 gap-2\">\r\n                              <Button\r\n                                 v-for=\"month in 12\"\r\n                                 :key=\"month\"\r\n                                 :variant=\"\r\n                                    modelValue.year === year &&\r\n                                    modelValue.month === month\r\n                                       ? 'default'\r\n                                       : 'outline'\r\n                                 \"\r\n                                 size=\"sm\"\r\n                                 class=\"h-7\"\r\n                                 @click=\"selectMonth(year, month)\"\r\n                              >\r\n                                 {{ getMonthName(month) }}\r\n                              </Button>\r\n                           </div>\r\n                        </CollapsibleContent>\r\n                     </Collapsible>\r\n                  </ScrollArea>\r\n               </CollapsibleContent>\r\n            </Collapsible>\r\n\r\n            <div class=\"flex items-center gap-1\">\r\n               <CalendarPrevButton class=\"static rotate-180\" />\r\n               <CalendarNextButton class=\"static rotate-180\" />\r\n            </div>\r\n         </CalendarHeader>\r\n         <div\r\n            class=\"mt-4 flex flex-col gap-y-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\"\r\n         >\r\n            <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\r\n               <CalendarGridHead>\r\n                  <CalendarGridRow>\r\n                     <CalendarHeadCell v-for=\"day in weekDays\" :key=\"day\">\r\n                        {{ day }}\r\n                     </CalendarHeadCell>\r\n                  </CalendarGridRow>\r\n               </CalendarGridHead>\r\n               <CalendarGridBody>\r\n                  <CalendarGridRow\r\n                     v-for=\"(weekDates, index) in month.rows\"\r\n                     :key=\"`weekDate-${index}`\"\r\n                     class=\"mt-2 w-full\"\r\n                  >\r\n                     <CalendarCell\r\n                        v-for=\"weekDate in weekDates\"\r\n                        :key=\"weekDate.toString()\"\r\n                        :date=\"weekDate\"\r\n                     >\r\n                        <CalendarCellTrigger\r\n                           :day=\"weekDate\"\r\n                           :month=\"month.value\"\r\n                           class=\"[&[data-today]:not([data-selected])]:bg-unset [&[data-today]:not([data-selected])]:text-unset data-[today]:after:content-[' '] data-[today]:after:bg-primary data-[today]:data-[selected]:after:bg-primary-foreground data-[today]:after:absolute data-[today]:after:bottom-[5px] data-[today]:after:h-[3px] data-[today]:after:w-[3px] data-[today]:after:rounded-full\"\r\n                        />\r\n                     </CalendarCell>\r\n                  </CalendarGridRow>\r\n               </CalendarGridBody>\r\n            </CalendarGrid>\r\n         </div> </CalendarRoot\r\n   ></ConfigProvider>\r\n</template>\r\n<style scoped>\r\n.dir-ltr {\r\n   direction: ltr;\r\n}\r\n</style>\r\n",
      "type": "registry:component"
    }
  ]
}